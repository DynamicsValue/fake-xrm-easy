#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataverseEntities
{
	
	
	/// <summary>
	/// Record type for the source record.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Dataverse Model Builder", "2.0.0.6")]
	public enum connection_record1objecttypecode
	{
		
		/// <summary>
		/// Contains predefined support terms for a channel to create entitlements for customers.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EntitlementTemplateChannel = 9703,
		
		/// <summary>
		/// Resource group or team whose members can be scheduled for a service.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SchedulingGroup = 4005,
		
		/// <summary>
		/// Metadata of knowledge base (KB) articles associated with Microsoft Dynamics 365 entities.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KnowledgeBaseRecord = 9930,
		
		/// <summary>
		/// Group or collection of people, equipment, and/or facilities that can be scheduled.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceGroup = 4007,
		
		/// <summary>
		/// Person with access to the Microsoft CRM system and who owns objects in the Microsoft CRM database.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Insight = 10927,
		
		/// <summary>
		/// Target objective for a user or a team for a specified time period.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Goal = 9600,
		
		/// <summary>
		/// Send invitations to existing contacts or email addresses and assign them to web roles upon redemption.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invitation = 10355,
		
		/// <summary>
		/// Defines the amount and type of support a customer should receive.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Entitlement = 9700,
		
		/// <summary>
		/// Activity that is delivered using email protocols.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 4202,
		
		/// <summary>
		/// This entity is used to store social profile information of its associated account and contacts on different social channels.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SocialProfile = 99,
		
		/// <summary>
		/// Entity that defines pricing levels.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PriceList = 1022,
		
		/// <summary>
		/// Formal offer for products and/or services, proposed at specific prices and related payment terms, which is sent to a prospective customer.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quote = 1084,
		
		/// <summary>
		/// Container for campaign activities and responses, sales literature, products, and lists to create, plan, execute, and track the results of a specific marketing campaign through its life.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Campaign = 4400,
		
		/// <summary>
		/// Order that has been billed.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invoice = 1090,
		
		/// <summary>
		/// Potential revenue-generating event, or sale to an account, which needs to be tracked through a sales process to completion.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Opportunity = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SequenceTarget = 10905,
		
		/// <summary>
		/// Used to categorize IoT devices.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTDeviceCategory = 10455,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shortcut = 10377,
		
		/// <summary>
		/// Tracks the interactions between the agents and customer
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ongoingconversation_Deprecated = 10754,
		
		/// <summary>
		/// Business that represents a customer or potential customer. The company that is billed in business transactions.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Account = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomerVoicealert = 10661,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SuggestionPrincipalObjectAccess = 10936,
		
		/// <summary>
		/// Defines the amount and type of support for a channel.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EntitlementChannel = 9701,
		
		/// <summary>
		/// Agreement to provide customer service during a specified amount of time or number of cases.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contract = 1010,
		
		/// <summary>
		/// Tracks the interaction between the agents and customer
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conversation = 10766,
		
		/// <summary>
		/// Service request case associated with a contract.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Case = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CopilotTranscript = 10987,
		
		/// <summary>
		/// Task performed, or to be performed, by a user for planning or running a campaign.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CampaignActivity = 4402,
		
		/// <summary>
		/// Resource that can be scheduled.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FacilityEquipment = 4000,
		
		/// <summary>
		/// Holds information about the redemption of an invite.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InviteRedemption = 10356,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublishingStateTransitionRule = 10375,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssignmentMap = 10920,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sequence = 10903,
		
		/// <summary>
		/// Activity that tracks the delivery of a letter. The activity can contain the electronic copy of the letter.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Letter = 4207,
		
		/// <summary>
		/// Specify Customer Asset.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomerAsset = 10431,
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SocialActivity = 4216,
		
		/// <summary>
		/// Activity to track a telephone call.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PhoneCall = 4210,
		
		/// <summary>
		/// Commitment representing a time interval with start/end times and duration.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Meeting = 4201,
		
		/// <summary>
		/// Session for interacting with a customer
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 10783,
		
		/// <summary>
		/// Web Portal
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Website = 10389,
		
		/// <summary>
		/// Defines the rules for automatically associating channel access profiles to external party records.For internal use only
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChannelAccessProfileRule = 9400,
		
		/// <summary>
		/// Prospect or potential sales opportunity. Leads are converted into accounts, contacts, or opportunities when they are qualified. Otherwise, they are deleted or archived.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lead = 4,
		
		/// <summary>
		/// Defines criteria based on which Entities are routed to Users or Sales Team
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssignmentRule = 10917,
		
		/// <summary>
		/// Information that is generated when a dialog is run. Every time that you run a dialog, a dialog session is created.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProcessSession = 4710,
		
		/// <summary>
		/// Task performed, or to be performed, by a user. An activity is any action for which an entry can be made on a calendar.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Activity = 4200,
		
		/// <summary>
		/// Generic activity representing work needed to be done.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Task = 4212,
		
		/// <summary>
		/// The Master appointment of a recurring appointment series.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecurringAppointment = 4251,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTAlert = 10453,
		
		/// <summary>
		/// Quote that has been accepted.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Order = 1088,
		
		/// <summary>
		/// Information about products and their pricing information.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Product = 1024,
		
		/// <summary>
		/// Position of a user in the hierarchy
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Position = 50,
		
		/// <summary>
		/// Activity that tracks a survey invitation sent to a person.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomerVoicesurveyinvite = 10671,
		
		/// <summary>
		/// Collection of system users that routinely collaborate. Teams can be used to simplify record sharing and provide team members with common access to organization data when team members belong to different Business Units.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Team = 9,
		
		/// <summary>
		/// Activity offered by the organization to satisfy its customer's needs. Each service activity includes date, time, duration, and required resources.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceActivity = 4214,
		
		/// <summary>
		/// Represents an outgoing message to a device connected to an IoT provider.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTDeviceCommand = 10456,
		
		/// <summary>
		/// Tracks registration activities on an IoT device.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTDeviceRegistrationHistory = 10460,
		
		/// <summary>
		/// Person with whom a business unit has a relationship, such as customer, supplier, and colleague.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contact = 2,
		
		/// <summary>
		/// Activity that tracks call outcome and number of pages for a fax and optionally stores an electronic copy of the document.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fax = 4204,
		
		/// <summary>
		/// Contains user profile images that are stored as attachments and displayed in posts.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProfileAlbum = 10656,
		
		/// <summary>
		/// Represents a connected device that can be registered with an IoT provider.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTDevice = 10454,
		
		/// <summary>
		/// Business competing for the sale represented by a lead or opportunity.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Competitor = 123,
		
		/// <summary>
		/// Group of existing or potential customers created for a marketing campaign or other sales purposes.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarketingList = 4300,
		
		/// <summary>
		/// Territory represents sales regions.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Territory = 2013,
		
		/// <summary>
		/// Organizational knowledge for internal and external use.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KnowledgeArticle = 9953,
		
		/// <summary>
		/// Response to a survey.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomerVoicesurveyresponse = 10673,
	}
	
	/// <summary>
	/// Record type of the target record.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Dataverse Model Builder", "2.0.0.6")]
	public enum connection_record2objecttypecode
	{
		
		/// <summary>
		/// Defines the amount and type of support a customer should receive.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Entitlement = 9700,
		
		/// <summary>
		/// Resource that can be scheduled.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FacilityEquipment = 4000,
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SocialActivity = 4216,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shortcut = 10377,
		
		/// <summary>
		/// Business competing for the sale represented by a lead or opportunity.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Competitor = 123,
		
		/// <summary>
		/// Information that is generated when a dialog is run. Every time that you run a dialog, a dialog session is created.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProcessSession = 4710,
		
		/// <summary>
		/// Group of existing or potential customers created for a marketing campaign or other sales purposes.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarketingList = 4300,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SequenceTarget = 10905,
		
		/// <summary>
		/// Service request case associated with a contract.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Case = 112,
		
		/// <summary>
		/// Defines the amount and type of support for a channel.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EntitlementChannel = 9701,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Insight = 10927,
		
		/// <summary>
		/// Entity that defines pricing levels.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PriceList = 1022,
		
		/// <summary>
		/// Collection of system users that routinely collaborate. Teams can be used to simplify record sharing and provide team members with common access to organization data when team members belong to different Business Units.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Team = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTAlert = 10453,
		
		/// <summary>
		/// Activity that tracks call outcome and number of pages for a fax and optionally stores an electronic copy of the document.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fax = 4204,
		
		/// <summary>
		/// Contains user profile images that are stored as attachments and displayed in posts.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProfileAlbum = 10656,
		
		/// <summary>
		/// Represents an outgoing message to a device connected to an IoT provider.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTDeviceCommand = 10456,
		
		/// <summary>
		/// Session for interacting with a customer
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 10783,
		
		/// <summary>
		/// Activity offered by the organization to satisfy its customer's needs. Each service activity includes date, time, duration, and required resources.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceActivity = 4214,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomerVoicealert = 10661,
		
		/// <summary>
		/// Order that has been billed.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invoice = 1090,
		
		/// <summary>
		/// Prospect or potential sales opportunity. Leads are converted into accounts, contacts, or opportunities when they are qualified. Otherwise, they are deleted or archived.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lead = 4,
		
		/// <summary>
		/// Group or collection of people, equipment, and/or facilities that can be scheduled.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceGroup = 4007,
		
		/// <summary>
		/// Person with access to the Microsoft CRM system and who owns objects in the Microsoft CRM database.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 8,
		
		/// <summary>
		/// Formal offer for products and/or services, proposed at specific prices and related payment terms, which is sent to a prospective customer.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quote = 1084,
		
		/// <summary>
		/// Contains predefined support terms for a channel to create entitlements for customers.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EntitlementTemplateChannel = 9703,
		
		/// <summary>
		/// Commitment representing a time interval with start/end times and duration.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Meeting = 4201,
		
		/// <summary>
		/// Activity that tracks a survey invitation sent to a person.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomerVoicesurveyinvite = 10671,
		
		/// <summary>
		/// Resource group or team whose members can be scheduled for a service.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SchedulingGroup = 4005,
		
		/// <summary>
		/// Defines criteria based on which Entities are routed to Users or Sales Team
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssignmentRule = 10917,
		
		/// <summary>
		/// Position of a user in the hierarchy
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Position = 50,
		
		/// <summary>
		/// Potential revenue-generating event, or sale to an account, which needs to be tracked through a sales process to completion.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Opportunity = 3,
		
		/// <summary>
		/// Information about products and their pricing information.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Product = 1024,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssignmentMap = 10920,
		
		/// <summary>
		/// Tracks registration activities on an IoT device.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTDeviceRegistrationHistory = 10460,
		
		/// <summary>
		/// Activity to track a telephone call.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PhoneCall = 4210,
		
		/// <summary>
		/// Web Portal
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Website = 10389,
		
		/// <summary>
		/// Tracks the interactions between the agents and customer
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ongoingconversation_Deprecated = 10754,
		
		/// <summary>
		/// Represents a connected device that can be registered with an IoT provider.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTDevice = 10454,
		
		/// <summary>
		/// Activity that is delivered using email protocols.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 4202,
		
		/// <summary>
		/// Specify Customer Asset.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomerAsset = 10431,
		
		/// <summary>
		/// This entity is used to store social profile information of its associated account and contacts on different social channels.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SocialProfile = 99,
		
		/// <summary>
		/// Quote that has been accepted.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Order = 1088,
		
		/// <summary>
		/// Territory represents sales regions.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Territory = 2013,
		
		/// <summary>
		/// Activity that tracks the delivery of a letter. The activity can contain the electronic copy of the letter.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Letter = 4207,
		
		/// <summary>
		/// Metadata of knowledge base (KB) articles associated with Microsoft Dynamics 365 entities.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KnowledgeBaseRecord = 9930,
		
		/// <summary>
		/// Target objective for a user or a team for a specified time period.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Goal = 9600,
		
		/// <summary>
		/// Send invitations to existing contacts or email addresses and assign them to web roles upon redemption.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invitation = 10355,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SuggestionPrincipalObjectAccess = 10936,
		
		/// <summary>
		/// Defines the rules for automatically associating channel access profiles to external party records.For internal use only
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChannelAccessProfileRule = 9400,
		
		/// <summary>
		/// Agreement to provide customer service during a specified amount of time or number of cases.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contract = 1010,
		
		/// <summary>
		/// Task performed, or to be performed, by a user. An activity is any action for which an entry can be made on a calendar.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Activity = 4200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CopilotTranscript = 10987,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sequence = 10903,
		
		/// <summary>
		/// Task performed, or to be performed, by a user for planning or running a campaign.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CampaignActivity = 4402,
		
		/// <summary>
		/// Holds information about the redemption of an invite.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InviteRedemption = 10356,
		
		/// <summary>
		/// The Master appointment of a recurring appointment series.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecurringAppointment = 4251,
		
		/// <summary>
		/// Generic activity representing work needed to be done.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Task = 4212,
		
		/// <summary>
		/// Used to categorize IoT devices.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IoTDeviceCategory = 10455,
		
		/// <summary>
		/// Business that represents a customer or potential customer. The company that is billed in business transactions.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Account = 1,
		
		/// <summary>
		/// Organizational knowledge for internal and external use.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KnowledgeArticle = 9953,
		
		/// <summary>
		/// Container for campaign activities and responses, sales literature, products, and lists to create, plan, execute, and track the results of a specific marketing campaign through its life.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Campaign = 4400,
		
		/// <summary>
		/// Person with whom a business unit has a relationship, such as customer, supplier, and colleague.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contact = 2,
		
		/// <summary>
		/// Response to a survey.
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomerVoicesurveyresponse = 10673,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublishingStateTransitionRule = 10375,
		
		/// <summary>
		/// Tracks the interaction between the agents and customer
		/// </summary>
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conversation = 10766,
	}
	
	/// <summary>
	/// Status of the connection.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Dataverse Model Builder", "2.0.0.6")]
	public enum connection_statecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	/// <summary>
	/// Reason for the status of the connection.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Dataverse Model Builder", "2.0.0.6")]
	public enum connection_statuscode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
	}
	
	/// <summary>
	/// Relationship between two entities.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connection")]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Dataverse Model Builder", "2.0.0.6")]
	public partial class Connection : Microsoft.Xrm.Sdk.Entity
	{
		
		/// <summary>
		/// Available fields, a the time of codegen, for the connection entity
		/// </summary>
		public partial class Fields
		{
			public const string ConnectionId = "connectionid";
			public const string Id = "connectionid";
			public const string CreatedBy = "createdby";
			public const string CreatedByName = "createdbyname";
			public const string CreatedByYomiName = "createdbyyominame";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedOnBehalfByName = "createdonbehalfbyname";
			public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
			public const string Description = "description";
			public const string EffectiveEnd = "effectiveend";
			public const string EffectiveStart = "effectivestart";
			public const string EntityImage = "entityimage";
			public const string EntityImage_Timestamp = "entityimage_timestamp";
			public const string EntityImage_URL = "entityimage_url";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsMaster = "ismaster";
			public const string IsMasterName = "ismastername";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByName = "modifiedbyname";
			public const string ModifiedByYomiName = "modifiedbyyominame";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
			public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwnerIdName = "owneridname";
			public const string OwnerIdYomiName = "owneridyominame";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningBusinessUnitName = "owningbusinessunitname";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Record1Id = "record1id";
			public const string Record1IdName = "record1idname";
			public const string Record1ObjectTypeCode = "record1objecttypecode";
			public const string Record1ObjectTypeCodeName = "record1objecttypecodename";
			public const string Record1RoleId = "record1roleid";
			public const string Record1RoleIdName = "record1roleidname";
			public const string Record2Id = "record2id";
			public const string Record2IdName = "record2idname";
			public const string Record2ObjectTypeCode = "record2objecttypecode";
			public const string Record2ObjectTypeCodeName = "record2objecttypecodename";
			public const string Record2RoleId = "record2roleid";
			public const string Record2RoleIdName = "record2roleidname";
			public const string RelatedConnectionId = "relatedconnectionid";
			public const string StateCode = "statecode";
			public const string StateCodeName = "statecodename";
			public const string StatusCode = "statuscode";
			public const string StatusCodeName = "statuscodename";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TransactionCurrencyIdName = "transactioncurrencyidname";
			public const string VersionNumber = "versionnumber";
			public const string Connection_AsyncOperations = "Connection_AsyncOperations";
			public const string Connection_ProcessSessions = "Connection_ProcessSessions";
			public const string Referencedconnection_related_connection = "Referencedconnection_related_connection";
			public const string account_connections1 = "account_connections1";
			public const string account_connections2 = "account_connections2";
			public const string activitypointer_connections1 = "activitypointer_connections1";
			public const string activitypointer_connections2 = "activitypointer_connections2";
			public const string business_unit_connections = "business_unit_connections";
			public const string Referencingconnection_related_connection = "connection_related_connection";
			public const string contact_connections1 = "contact_connections1";
			public const string contact_connections2 = "contact_connections2";
			public const string contract_connections1 = "contract_connections1";
			public const string contract_connections2 = "contract_connections2";
			public const string createdby_connection = "createdby_connection";
			public const string email_connections1 = "email_connections1";
			public const string email_connections2 = "email_connections2";
			public const string fax_connections1 = "fax_connections1";
			public const string fax_connections2 = "fax_connections2";
			public const string incident_connections1 = "incident_connections1";
			public const string incident_connections2 = "incident_connections2";
			public const string lead_connections1 = "lead_connections1";
			public const string lead_connections2 = "lead_connections2";
			public const string list_connections1 = "list_connections1";
			public const string list_connections2 = "list_connections2";
			public const string lk_connectionbase_createdonbehalfby = "lk_connectionbase_createdonbehalfby";
			public const string lk_connectionbase_modifiedonbehalfby = "lk_connectionbase_modifiedonbehalfby";
			public const string modifiedby_connection = "modifiedby_connection";
			public const string opportunity_connections1 = "opportunity_connections1";
			public const string opportunity_connections2 = "opportunity_connections2";
			public const string phonecall_connections1 = "phonecall_connections1";
			public const string phonecall_connections2 = "phonecall_connections2";
			public const string processsession_connections1 = "processsession_connections1";
			public const string processsession_connections2 = "processsession_connections2";
			public const string quote_connections1 = "quote_connections1";
			public const string quote_connections2 = "quote_connections2";
			public const string systemuser_connections1 = "systemuser_connections1";
			public const string systemuser_connections2 = "systemuser_connections2";
			public const string task_connections1 = "task_connections1";
			public const string task_connections2 = "task_connections2";
			public const string team_connections1 = "team_connections1";
			public const string team_connections2 = "team_connections2";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Connection() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "connection";
		
		public const string EntityLogicalCollectionName = "connections";
		
		public const string EntitySetName = "connections";
		
		public const int EntityTypeCode = 3234;
		
		/// <summary>
		/// Unique identifier of the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("connectionid")]
		public System.Nullable<System.Guid> ConnectionId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("connectionid");
			}
			set
			{
				this.SetAttributeValue("connectionid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("connectionid")]
		public override System.Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.ConnectionId = value;
			}
		}
		
		/// <summary>
		/// Shows who created the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
			}
		}
		
		/// <summary>
		/// Name of the user who created the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyname")]
		public string CreatedByName
		{
			get
			{
				if (this.FormattedValues.Contains("createdby"))
				{
					return this.FormattedValues["createdby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// YomiName of the user who created the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyyominame")]
		public string CreatedByYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("createdby"))
				{
					return this.FormattedValues["createdby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
			}
		}
		
		/// <summary>
		/// Shows who created the record on behalf of another user.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfbyname")]
		public string CreatedOnBehalfByName
		{
			get
			{
				if (this.FormattedValues.Contains("createdonbehalfby"))
				{
					return this.FormattedValues["createdonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
		public string CreatedOnBehalfByYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("createdonbehalfby"))
				{
					return this.FormattedValues["createdonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Type additional information to describe the connection, such as the length or quality of the relationship.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.SetAttributeValue("description", value);
			}
		}
		
		/// <summary>
		/// Enter the end date of the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("effectiveend")]
		public System.Nullable<System.DateTime> EffectiveEnd
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("effectiveend");
			}
			set
			{
				this.SetAttributeValue("effectiveend", value);
			}
		}
		
		/// <summary>
		/// Enter the start date of the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("effectivestart")]
		public System.Nullable<System.DateTime> EffectiveStart
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("effectivestart");
			}
			set
			{
				this.SetAttributeValue("effectivestart", value);
			}
		}
		
		/// <summary>
		/// The default image for the entity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimage")]
		public byte[] EntityImage
		{
			get
			{
				return this.GetAttributeValue<byte[]>("entityimage");
			}
			set
			{
				this.SetAttributeValue("entityimage", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimage_timestamp")]
		public System.Nullable<long> EntityImage_Timestamp
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("entityimage_timestamp");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimage_url")]
		public string EntityImage_URL
		{
			get
			{
				return this.GetAttributeValue<string>("entityimage_url");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimageid")]
		public System.Nullable<System.Guid> EntityImageId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("entityimageid");
			}
		}
		
		/// <summary>
		/// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("exchangerate")]
		public System.Nullable<decimal> ExchangeRate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("exchangerate");
			}
		}
		
		/// <summary>
		/// Unique identifier of the data import or data migration that created this record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("importsequencenumber")]
		public System.Nullable<int> ImportSequenceNumber
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("importsequencenumber");
			}
			set
			{
				this.SetAttributeValue("importsequencenumber", value);
			}
		}
		
		/// <summary>
		/// Indicates that this is the master record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismaster")]
		public System.Nullable<bool> IsMaster
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ismaster");
			}
		}
		
		/// <summary>
		/// Indicates if it is the master record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismastername")]
		public string IsMasterName
		{
			get
			{
				if (this.FormattedValues.Contains("ismaster"))
				{
					return this.FormattedValues["ismaster"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Shows who last updated the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
			}
		}
		
		/// <summary>
		/// Name of the user who last modified the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedbyname")]
		public string ModifiedByName
		{
			get
			{
				if (this.FormattedValues.Contains("modifiedby"))
				{
					return this.FormattedValues["modifiedby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// YomiName of the user who last modified the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedbyyominame")]
		public string ModifiedByYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("modifiedby"))
				{
					return this.FormattedValues["modifiedby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
		public System.Nullable<System.DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
			}
		}
		
		/// <summary>
		/// Shows who last updated the record on behalf of another user.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
		public string ModifiedOnBehalfByName
		{
			get
			{
				if (this.FormattedValues.Contains("modifiedonbehalfby"))
				{
					return this.FormattedValues["modifiedonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
		public string ModifiedOnBehalfByYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("modifiedonbehalfby"))
				{
					return this.FormattedValues["modifiedonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Name of the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return this.GetAttributeValue<string>("name");
			}
		}
		
		/// <summary>
		/// Date and time that the record was migrated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overriddencreatedon")]
		public System.Nullable<System.DateTime> OverriddenCreatedOn
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overriddencreatedon");
			}
			set
			{
				this.SetAttributeValue("overriddencreatedon", value);
			}
		}
		
		/// <summary>
		/// Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ownerid")]
		public Microsoft.Xrm.Sdk.EntityReference OwnerId
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ownerid");
			}
			set
			{
				this.SetAttributeValue("ownerid", value);
			}
		}
		
		/// <summary>
		/// Name of the owner of the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owneridname")]
		public string OwnerIdName
		{
			get
			{
				if (this.FormattedValues.Contains("ownerid"))
				{
					return this.FormattedValues["ownerid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owneridyominame")]
		public string OwnerIdYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("ownerid"))
				{
					return this.FormattedValues["ownerid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Shows the business unit that the record owner belongs to.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		public Microsoft.Xrm.Sdk.EntityReference OwningBusinessUnit
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningbusinessunit");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunitname")]
		public string OwningBusinessUnitName
		{
			get
			{
				if (this.FormattedValues.Contains("owningbusinessunit"))
				{
					return this.FormattedValues["owningbusinessunit"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier of the team who owns the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
		public Microsoft.Xrm.Sdk.EntityReference OwningTeam
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who owns the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
		public Microsoft.Xrm.Sdk.EntityReference OwningUser
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Unique identifier of the source record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		public Microsoft.Xrm.Sdk.EntityReference Record1Id
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("record1id");
			}
			set
			{
				this.SetAttributeValue("record1id", value);
			}
		}
		
		/// <summary>
		/// Display name for the source record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1idname")]
		public string Record1IdName
		{
			get
			{
				if (this.FormattedValues.Contains("record1id"))
				{
					return this.FormattedValues["record1id"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Shows the record type of the source record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1objecttypecode")]
		public virtual connection_record1objecttypecode? Record1ObjectTypeCode
		{
			get
			{
				return ((connection_record1objecttypecode?)(EntityOptionSetEnum.GetEnum(this, "record1objecttypecode")));
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1objecttypecodename")]
		public string Record1ObjectTypeCodeName
		{
			get
			{
				if (this.FormattedValues.Contains("record1objecttypecode"))
				{
					return this.FormattedValues["record1objecttypecode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Choose the primary party's role or relationship with the second party.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1roleid")]
		public Microsoft.Xrm.Sdk.EntityReference Record1RoleId
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("record1roleid");
			}
			set
			{
				this.SetAttributeValue("record1roleid", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1roleidname")]
		public string Record1RoleIdName
		{
			get
			{
				if (this.FormattedValues.Contains("record1roleid"))
				{
					return this.FormattedValues["record1roleid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier of the target record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		public Microsoft.Xrm.Sdk.EntityReference Record2Id
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("record2id");
			}
			set
			{
				this.SetAttributeValue("record2id", value);
			}
		}
		
		/// <summary>
		/// Display name for the target record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2idname")]
		public string Record2IdName
		{
			get
			{
				if (this.FormattedValues.Contains("record2id"))
				{
					return this.FormattedValues["record2id"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Shows the record type of the target record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2objecttypecode")]
		public virtual connection_record2objecttypecode? Record2ObjectTypeCode
		{
			get
			{
				return ((connection_record2objecttypecode?)(EntityOptionSetEnum.GetEnum(this, "record2objecttypecode")));
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2objecttypecodename")]
		public string Record2ObjectTypeCodeName
		{
			get
			{
				if (this.FormattedValues.Contains("record2objecttypecode"))
				{
					return this.FormattedValues["record2objecttypecode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Choose the secondary party's role or relationship with the primary party.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2roleid")]
		public Microsoft.Xrm.Sdk.EntityReference Record2RoleId
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("record2roleid");
			}
			set
			{
				this.SetAttributeValue("record2roleid", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2roleidname")]
		public string Record2RoleIdName
		{
			get
			{
				if (this.FormattedValues.Contains("record2roleid"))
				{
					return this.FormattedValues["record2roleid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier for the reciprocal connection record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("relatedconnectionid")]
		public Microsoft.Xrm.Sdk.EntityReference RelatedConnectionId
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("relatedconnectionid");
			}
		}
		
		/// <summary>
		/// Shows whether the connection is active or inactive. Inactive connections are read-only and can't be edited unless they are reactivated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecode")]
		public virtual connection_statecode? StateCode
		{
			get
			{
				return ((connection_statecode?)(EntityOptionSetEnum.GetEnum(this, "statecode")));
			}
			set
			{
				this.SetAttributeValue("statecode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecodename")]
		public string StateCodeName
		{
			get
			{
				if (this.FormattedValues.Contains("statecode"))
				{
					return this.FormattedValues["statecode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Reason for the status of the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscode")]
		public virtual connection_statuscode? StatusCode
		{
			get
			{
				return ((connection_statuscode?)(EntityOptionSetEnum.GetEnum(this, "statuscode")));
			}
			set
			{
				this.SetAttributeValue("statuscode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscodename")]
		public string StatusCodeName
		{
			get
			{
				if (this.FormattedValues.Contains("statuscode"))
				{
					return this.FormattedValues["statuscode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Choose the local currency for the record to make sure budgets are reported in the correct currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("transactioncurrencyid")]
		public Microsoft.Xrm.Sdk.EntityReference TransactionCurrencyId
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("transactioncurrencyid");
			}
			set
			{
				this.SetAttributeValue("transactioncurrencyid", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("transactioncurrencyidname")]
		public string TransactionCurrencyIdName
		{
			get
			{
				if (this.FormattedValues.Contains("transactioncurrencyid"))
				{
					return this.FormattedValues["transactioncurrencyid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Version number of the connection.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N Connection_AsyncOperations
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("Connection_AsyncOperations")]
		public System.Collections.Generic.IEnumerable<DataverseEntities.AsyncOperation> Connection_AsyncOperations
		{
			get
			{
				return this.GetRelatedEntities<DataverseEntities.AsyncOperation>("Connection_AsyncOperations", null);
			}
			set
			{
				this.SetRelatedEntities<DataverseEntities.AsyncOperation>("Connection_AsyncOperations", null, value);
			}
		}
		
		/// <summary>
		/// 1:N Connection_ProcessSessions
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("Connection_ProcessSessions")]
		public System.Collections.Generic.IEnumerable<DataverseEntities.ProcessSession> Connection_ProcessSessions
		{
			get
			{
				return this.GetRelatedEntities<DataverseEntities.ProcessSession>("Connection_ProcessSessions", null);
			}
			set
			{
				this.SetRelatedEntities<DataverseEntities.ProcessSession>("Connection_ProcessSessions", null, value);
			}
		}
		
		/// <summary>
		/// 1:N connection_related_connection
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("connection_related_connection", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public System.Collections.Generic.IEnumerable<DataverseEntities.Connection> Referencedconnection_related_connection
		{
			get
			{
				return this.GetRelatedEntities<DataverseEntities.Connection>("connection_related_connection", Microsoft.Xrm.Sdk.EntityRole.Referenced);
			}
			set
			{
				this.SetRelatedEntities<DataverseEntities.Connection>("connection_related_connection", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// N:1 account_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("account_connections1")]
		public DataverseEntities.Account account_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Account>("account_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Account>("account_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 account_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("account_connections2")]
		public DataverseEntities.Account account_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Account>("account_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Account>("account_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 activitypointer_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("activitypointer_connections1")]
		public DataverseEntities.ActivityPointer activitypointer_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.ActivityPointer>("activitypointer_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.ActivityPointer>("activitypointer_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 activitypointer_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("activitypointer_connections2")]
		public DataverseEntities.ActivityPointer activitypointer_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.ActivityPointer>("activitypointer_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.ActivityPointer>("activitypointer_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 business_unit_connections
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("business_unit_connections")]
		public DataverseEntities.BusinessUnit business_unit_connections
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.BusinessUnit>("business_unit_connections", null);
			}
		}
		
		/// <summary>
		/// N:1 connection_related_connection
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("relatedconnectionid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("connection_related_connection", Microsoft.Xrm.Sdk.EntityRole.Referencing)]
		public DataverseEntities.Connection Referencingconnection_related_connection
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Connection>("connection_related_connection", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
		}
		
		/// <summary>
		/// N:1 contact_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("contact_connections1")]
		public DataverseEntities.Contact contact_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Contact>("contact_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Contact>("contact_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 contact_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("contact_connections2")]
		public DataverseEntities.Contact contact_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Contact>("contact_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Contact>("contact_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 contract_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("contract_connections1")]
		public DataverseEntities.Contract contract_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Contract>("contract_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Contract>("contract_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 contract_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("contract_connections2")]
		public DataverseEntities.Contract contract_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Contract>("contract_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Contract>("contract_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 createdby_connection
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("createdby_connection")]
		public DataverseEntities.SystemUser createdby_connection
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.SystemUser>("createdby_connection", null);
			}
		}
		
		/// <summary>
		/// N:1 email_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("email_connections1")]
		public DataverseEntities.Email email_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Email>("email_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Email>("email_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 email_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("email_connections2")]
		public DataverseEntities.Email email_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Email>("email_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Email>("email_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 fax_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("fax_connections1")]
		public DataverseEntities.Fax fax_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Fax>("fax_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Fax>("fax_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 fax_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("fax_connections2")]
		public DataverseEntities.Fax fax_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Fax>("fax_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Fax>("fax_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 incident_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("incident_connections1")]
		public DataverseEntities.Incident incident_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Incident>("incident_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Incident>("incident_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 incident_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("incident_connections2")]
		public DataverseEntities.Incident incident_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Incident>("incident_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Incident>("incident_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 lead_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lead_connections1")]
		public DataverseEntities.Lead lead_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Lead>("lead_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Lead>("lead_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 lead_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lead_connections2")]
		public DataverseEntities.Lead lead_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Lead>("lead_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Lead>("lead_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 list_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("list_connections1")]
		public DataverseEntities.List list_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.List>("list_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.List>("list_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 list_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("list_connections2")]
		public DataverseEntities.List list_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.List>("list_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.List>("list_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 lk_connectionbase_createdonbehalfby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_connectionbase_createdonbehalfby")]
		public DataverseEntities.SystemUser lk_connectionbase_createdonbehalfby
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.SystemUser>("lk_connectionbase_createdonbehalfby", null);
			}
		}
		
		/// <summary>
		/// N:1 lk_connectionbase_modifiedonbehalfby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_connectionbase_modifiedonbehalfby")]
		public DataverseEntities.SystemUser lk_connectionbase_modifiedonbehalfby
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.SystemUser>("lk_connectionbase_modifiedonbehalfby", null);
			}
		}
		
		/// <summary>
		/// N:1 modifiedby_connection
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("modifiedby_connection")]
		public DataverseEntities.SystemUser modifiedby_connection
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.SystemUser>("modifiedby_connection", null);
			}
		}
		
		/// <summary>
		/// N:1 opportunity_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("opportunity_connections1")]
		public DataverseEntities.Opportunity opportunity_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Opportunity>("opportunity_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Opportunity>("opportunity_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 opportunity_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("opportunity_connections2")]
		public DataverseEntities.Opportunity opportunity_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Opportunity>("opportunity_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Opportunity>("opportunity_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 phonecall_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("phonecall_connections1")]
		public DataverseEntities.PhoneCall phonecall_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.PhoneCall>("phonecall_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.PhoneCall>("phonecall_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 phonecall_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("phonecall_connections2")]
		public DataverseEntities.PhoneCall phonecall_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.PhoneCall>("phonecall_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.PhoneCall>("phonecall_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 processsession_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("processsession_connections1")]
		public DataverseEntities.ProcessSession processsession_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.ProcessSession>("processsession_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.ProcessSession>("processsession_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 processsession_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("processsession_connections2")]
		public DataverseEntities.ProcessSession processsession_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.ProcessSession>("processsession_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.ProcessSession>("processsession_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 quote_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("quote_connections1")]
		public DataverseEntities.Quote quote_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Quote>("quote_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Quote>("quote_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 quote_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("quote_connections2")]
		public DataverseEntities.Quote quote_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Quote>("quote_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Quote>("quote_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 systemuser_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("systemuser_connections1")]
		public DataverseEntities.SystemUser systemuser_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.SystemUser>("systemuser_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.SystemUser>("systemuser_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 systemuser_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("systemuser_connections2")]
		public DataverseEntities.SystemUser systemuser_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.SystemUser>("systemuser_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.SystemUser>("systemuser_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 task_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("task_connections1")]
		public DataverseEntities.Task task_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Task>("task_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Task>("task_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 task_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("task_connections2")]
		public DataverseEntities.Task task_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Task>("task_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Task>("task_connections2", null, value);
			}
		}
		
		/// <summary>
		/// N:1 team_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record1id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("team_connections1")]
		public DataverseEntities.Team team_connections1
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Team>("team_connections1", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Team>("team_connections1", null, value);
			}
		}
		
		/// <summary>
		/// N:1 team_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("record2id")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("team_connections2")]
		public DataverseEntities.Team team_connections2
		{
			get
			{
				return this.GetRelatedEntity<DataverseEntities.Team>("team_connections2", null);
			}
			set
			{
				this.SetRelatedEntity<DataverseEntities.Team>("team_connections2", null, value);
			}
		}
	}
}
#pragma warning restore CS1591
